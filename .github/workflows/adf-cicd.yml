# This is a basic workflow to help you get started with Actions

name: Azure Data Factory CICD

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**.sqlproj'
      - '**/workflows/**'
      - '**/dbo/**'
      - '**/SalesLT/**'
      - '**/Security/**'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ResourceGroup: rg-adfdevops-demo

permissions:
      id-token: write
      contents: read
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains several jobs for CI/CD
  
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        
      - name: Export ARM Template
        id: export
        uses: Azure/data-factory-export-action@v1.0.2
        
      # Uploading our artifact from adf_publish branch
      - uses: actions/upload-artifact@v3
        with:
          name: adf-artifact
          path: ${{ steps.export.outputs.arm-template-directory }}
          
  SIT_Deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: SIT
    steps:
    
      # Downloading the artifact we uploaded earlier
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          # Artifact name
          name: adf-artifact

      # Logging in to Azure with OIDC
      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true 
          
      # Deploying to SIT environment
      - name: Deploy resources to SIT
        uses: Azure/data-factory-deploy-action@v1.2.0
        with:
          resourceGroupName: ${{ env.ResourceGroup }}
          dataFactoryName: ADF-KMCICDDemo-SIT
          armTemplateFile: ARMTemplateForFactory.json
      - name: PR Approve
        uses: actions-cool/pr-approve@v0.0.1-beat

          
  UAT_Deploy:
    runs-on: ubuntu-latest
    needs: SIT_Deploy
    environment: UAT
    steps:
    
      # Downloading the artifact we uploaded earlier
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          # Artifact name
          name: adf-artifact

      # Logging in to Azure with OIDC
      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true 
          
      # Deploying to UAT environment
      - name: Deploy resources to UAT
        uses: Azure/data-factory-deploy-action@v1.2.0
        with:
          resourceGroupName: ${{ env.ResourceGroup }}
          dataFactoryName: ADF-KMCICDDemo-UAT
          armTemplateFile: ARMTemplateForFactory.json
          
  PROD_Deploy:
    runs-on: ubuntu-latest
    needs: UAT_Deploy
    environment: PROD
    steps:
    
      # Downloading the artifact we uploaded earlier
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          # Artifact name
          name: adf-artifact

      # Logging in to Azure with OIDC
      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true 
          
      # Deploying to PROD environment
      - name: Deploy resources to Production
        uses: Azure/data-factory-deploy-action@v1.2.0
        with:
          resourceGroupName: ${{ env.ResourceGroup }}
          dataFactoryName: ADF-KMCICDDemo-PROD
          armTemplateFile: ARMTemplateForFactory.json
